# Copyright (c) 2017 Cisco and/or its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


indent_with_tabs		= 0		# 1=indent to level only, 2=indent with tabs
input_tab_size			= 4		# original tab size
output_tab_size			= 4		# new tab size
indent_columns			= output_tab_size
indent_label			= 2		# pos: absolute col, neg: relative column
# indent_align_string		= False		# align broken strings
# indent_brace			= 0

nl_if_leave_one_liners          = false    	# Don't split one-line if/else statements - 'if(a) b++;' (false/true)

nl_enum_brace                   = remove        # (ignore/add/remove/force) newline between 'enum' and '{'
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			= remove	# "do {" vs "do \n {"
nl_if_brace			= remove	# "if () {" vs "if () \n {"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
nl_switch_brace			= remove	# "switch () {" vs "switch () \n {"
# nl_func_var_def_blk		= 1
# nl_before_case			= 1
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= TRUE
nl_brace_while			= remove
nl_brace_else			= remove
nl_squeeze_ifdef		= TRUE
nl_func_type_name               = add   # (ignore/add/remove/force) newline between return type and function name in a function definition


# The span for aligning struct initializer values (0=don't align)
align_struct_init_span                   = 4        # number

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case                       = 4        # number

# Make all if/elseif/else statements in a chain be braced or not. Overrides mod_full_brace_if.
# If any must be braced, they are all braced.  If all can be unbraced, then the braces are removed.
mod_full_brace_if_chain          = false    	# false/true
# mod_paren_on_return		= add		# "return 1;" vs "return (1);"
mod_full_brace_if		= add		# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for		= add		# "for () a--;" vs "for () { a--; }"
mod_full_brace_do		= add		# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while		= add		# "while (a) a--;" vs "while (a) { a--; }"
mod_remove_empty_return         = true    	# Remove a void 'return;' that appears as the last statement in a function. (false/true)

sp_after_ptr_star               = remove   	# (ignore/add/remove/force) space after pointer star '*', if followed by a word.
sp_func_proto_paren             = remove   	# (ignore/add/remove/force) A space between function name and '(' on function declaration
sp_return_paren                 = force   	# (ignore/add/remove/force) a space between 'return' and '('
sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= add		# "(int) a" vs "(int)a"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove	# "( 1 )" vs "(1)"
sp_inside_fparen		= remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen		= remove        # "( 1 )" vs "(1)" - if/for/etc
sp_type_func                    = add   # ignore/add/remove/force A space between return type and function name
sp_assign			= force
sp_arith			= force
sp_bool				= force
sp_compare			= force
sp_after_comma			= force
sp_func_def_paren		= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"
sp_paren_brace                  = add   	# Force a space between ')' and '{'
sp_else_brace                   = add   	# Add or remove space between 'else' and '{' if on the same line (ignore/add/remove/force)
sp_brace_else                   = force		# Add or remove space between '}' and 'else' if on the same line (ignore/add/remove/force)

# align_with_tabs			= FALSE		# use tabs to align
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= TRUE
# align_var_def_span		= 2
# align_var_def_inline		= TRUE
# align_var_def_star		= TRUE
# align_var_def_colon		= TRUE
# align_assign_span		= 1
# align_struct_init_span		= 3
# align_var_struct_span		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap		= 4
# align_number_left		= TRUE
# align_typedef_span		= 5
# align_typedef_gap		= 3

cmt_star_cont			= TRUE	# put a star on subsequent comment lines

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE

# Add or remove space between pointer stars '*'
sp_between_ptr_star                      = remove
